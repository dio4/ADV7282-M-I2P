--- adv7180_rk_kern6_1.c.orig	2025-05-24 00:00:00.000000000 +0000
+++ adv7180_rk_kern6_1.c	2025-05-24 00:00:00.000000000 +0000
@@
+// ...existing code...
+#define ADV7180_FLAG_I2P		(1 << 6)
+// ...existing code...
@@
 static const struct adv7180_chip_info adv7282_m_info = {
 	// ...existing code...
-	.flags = ADV7180_FLAG_MIPI_CSI2,
+	.flags = ADV7180_FLAG_MIPI_CSI2 | ADV7180_FLAG_I2P,
 	// ...existing code...
 };
 // ...existing code...
@@
 static int adv7180_set_field_mode(struct adv7180_state *state)
 {
 	// ...existing code...
-	if (state->chip_info->flags & ADV7180_FLAG_I2P) {
-		// ...existing code...
-		// Do not change field mode for I2P chips
-		return 0;
-	}
+	if (state->chip_info->flags & ADV7180_FLAG_I2P) {
+		// Always enable I2P (progressive) mode for ADV7282-M
+		adv7180_write(state, 0x0E, 0x80); // VPP register: enable I2P
+		adv7180_write(state, 0x0F, 0x00); // VPP register: default
+		return 0;
+	}
 	// ...existing code...
 }
 // ...existing code...
@@
 static int adv7180_set_pad_format(struct v4l2_subdev *sd,
 				struct v4l2_subdev_pad_config *cfg,
 				struct v4l2_subdev_format *fmt)
 {
 	struct adv7180_state *state = to_state(sd);
 	// ...existing code...
-	if (state->chip_info->flags & ADV7180_FLAG_I2P)
-		fmt->format.field = V4L2_FIELD_NONE;
+	if (state->chip_info->flags & ADV7180_FLAG_I2P)
+		fmt->format.field = V4L2_FIELD_NONE;
 	// ...existing code...
 }
 // ...existing code...
@@
 static int adv7182_init(struct adv7180_state *state)
 {
 	int ret;
 	// ...existing code...
 	ret = adv7180_set_field_mode(state);
 	if (ret)
 		return ret;
 	// ...existing code...
 }
 // ...existing code...
